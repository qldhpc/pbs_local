#!/bin/bash

# qjobs: provide tabularised information about a user's PBS jobs
#
# Version 1.0 by Justin Lee <jm.lee@qut.edu.au>, 19/8/2015
# Derived from the original qjobs script by Jason Bell <j.bell@cqu.edu.au>
# Rewritten for efficiency, and extended to provide additional functionality
# (historic and array jobs) and information (nodes, walltime,
# host/array/gpu/mics)


user=$(whoami)
histflag=""
stateflag=""
subjobflag=""
jobid=""

usage_str="Usage: $(basename $0) [-h] [-u username] [-x] [-r] [-t|-T] [ jobid ]"
while getopts hu:xrtT opt; do
    case "$opt" in
        h) # help
            echo >&2 "$usage_str"
            echo >&2 "Provide tabularised information about a user's PBS jobs"
            echo >&2 "Arguments:"
            echo >&2 "    -h: this help information"
            echo >&2 "    -u: username (default is current user)"
            echo >&2 "    -x: provide historical information"
            echo >&2 "    -r: show running jobs only (not for use with -x or jobid)"
            echo >&2 "    -t: provide array subjob information"
            echo >&2 "    -T: the same as -t"
            echo >&2 "Optionally a single jobid parameter may be specified"
            echo >&2 ""
            exit 0
            ;;
        u) # specify username
            user="$OPTARG"
            ;;
        x) # include finished jobs
            histflag="-x"
            ;;
        r) # running jobs only (B for array jobs)
            stateflag="-s RB"
            ;;
        [tT] ) # extract subjobs from array jobs
            subjobflag="-T"
            ;;
        \?) # unknown flag
            echo >&2 "$usage_str"
            exit 1
            ;;
    esac
done
# get rid of option params
shift $((OPTIND-1))

# sanity check parameters
if [ -n "$stateflag" ]; then
    if [ -n "$histflag" ]; then
        echo >&2 "Error: -r (running) option cannot be used with -x (historical) option!"
        exit 1
    fi
    if [ $# -eq 1 ]; then
        echo >&2 "Error: -r (running) option cannot be used with jobid parameter!"
        exit 1
    fi
fi

# if there is a trailing parameter, then it should be the jobid
if [ $# -eq 1 ]; then
    jobid=$1
    shift
    # qstat uses -t for subjobs,  not -T
    subjobflag=${subjobflag/T/t}
    # test that job exists
    qstat -x $jobid > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        # get owner of job. note grep -F to avoid interpreting []
        owner=$(qstat -x -n1 $jobid 2>/dev/null | grep -F "$jobid" | awk '{ print $2 }')
        # note sanity check that job is an array job
        if [ -n "$subjobflag" ] && [ $(expr index "$jobid" "[") -gt 0 ]; then
            subidx="${jobid#*[}"
            subidx="${subidx%]*}"
            if [ -z "$subidx" ]; then
                # only want the actual subjobs (with indexes)
                jobspec="${jobid%[]*}\[[0-9]+\]"
            else
                # this particular subjob
                jobspec="${jobid%[*}\[$subidx\]"
            fi
        else
            # note: strip out trailing [] from jobid in grep
            jobspec="${jobid%[]*}"
        fi
        job_list=( $(qstat $subjobflag $histflag -n1 $jobid 2>/dev/null | grep -E "$jobspec" | awk '{ print $1 }' | sed "s/\..*$//") )
    fi
elif [ $# -eq 0 ]; then
    # trim whitespace
    arglist=$(echo "$subjobflag $histflag $stateflag" | xargs)
    # create an array of jobs
    job_list=( $(qselect -u $user $arglist) ) 
else
    echo >&2 "$usage_str"
    exit 1
fi

# length of array is number of jobs
num_jobs=${#job_list[@]}


if [ -n "$histflag" ]; then
    infostr="$num_jobs jobs found"
else
    infostr="$num_jobs running jobs found"
fi
if [ -z "$jobid" ]; then
    infostr="$infostr found for $user"
else
    if [ -z "$owner" ]; then
        owner="unknown"
    fi
    infostr="$infostr found with jobid $jobid - owner: $owner"
fi

echo
echo "$infostr"

if [ $num_jobs == 0 ]; then
    [ -z "$histflag" ] && echo "to see finished jobs, run $(basename $0) with the -x flag"
    [ -z "$subjobflag" ] && [ -n "$jobid" ] && [ $(expr index "$jobid" "[") -gt 0 ] && echo "to see array sub-jobs, run $(basename $0) with a -t or -T flag"
    echo
    exit
fi

echo
printf "=========================================================================================\n"
printf "             Job                   NDS    CPUs       Mem  (Gb)    Walltime   Host/Array/\n"
printf "          ID     Name         State     Req Util%%  Req'd  Used  Req'd  Used   GPU/mics\n"
printf "=========================================================================================\n"

# iterate over each job
for jobid in ${job_list[@]}; do
    qstat $histflag -f $jobid | awk ' 
    BEGIN {
        used = 0
        select =""
        arrayjob = 0
        comments = ""
        rqmem = ""
    }
    /resources_used./ { used = 1 }
    # sometimes the select is the only bit of information we have on requested resources
    /Resource_List.select/ { select = tolower($3) }
    /array = True/ { arrayjob = 1 }
    /array_indices_remaining/ { array_used = $3 }
    /array_indices_submitted/ { array_req = $3 }
    /Job Id/ {
        # strip out the .pbsserver suffix
        job_id = substr($3,1,index($3,".")-1)
    }
    /Job_Name/ { job_name = $3 }
    /job_state/ { job_state = $3 }
    /exec_host/ { exec_host = $3 }
    /Resource_List.nodect/ { node_cnt = $3 }
    /Resource_List.walltime/ {
        # only want hours (unless < 1 hour)
        n = split($3, warray,":")
        if (warray[1] != 0) {
            req_walltime = warray[1]
        } else {
            req_walltime = ":" warray[2]
        }
    }
    /Resource_List.ngpus/ { req_ngpus = $3 }
    /Resource_List.nmics/ { req_nmics = $3 }

    # Note: Resource_List.ncpus and resources_used.ncpus will give same value
    #       however, if job is queued, then resources_used wont be available
    #/resources_used.ncpus/ { ncpus = $3 }
    /Resource_List.ncpus/ { ncpus = $3 }

    /resources_used.cpupercent/ { used_cpu = $3 }
    /resources_used.walltime/ {
        # only want hours (unless < 1 hour)
        n = split($3, warray,":")
        if (warray[1] != 0) {
            used_walltime = warray[1]
        } else {
            used_walltime = ":" warray[2]
        }
    }
    /resources_used.mem/ {
        umem = tolower($3)
        if (umem ~/kb/) {
            used_mem = umem/1000000
        } else if (umem ~/mb/) {
            used_mem = umem/1000
        } else { 
            used_mem = umem/1
        }
    }
    /Resource_List.mem/ {
        rqmem = tolower($3)
        # do base processing later to avoid code duplication

    }
    END {
        # sometimes there is no separate request information,
        # in which case, extract ncpus and mem it from the select statement
        if (length(rqmem) == 0 || ncpus == 0) {
            n = split(tolower(select), sarray,":")
            for (i=1; i<=n; i++) {
                if (sarray[i] ~/mem=/) {
                    rqmem = substr(sarray[i],index(sarray[i],"=")+1)
                } else if (sarray[i] ~/ncpus=/) {
                    ncpus = substr(sarray[i],index(sarray[i],"=")+1)
                }
            }
        }
        if (length(rqmem) > 0) {
            if (rqmem ~/kb/) {
                req_mem = rqmem/1000000
            } else if (rqmem ~/mb/) {
                req_mem = rqmem/1000
            } else { 
                req_mem = rqmem/1
            }
        }

        if (req_nmics > 0) {
            comments = "mics=" req_nmics
        }
        if (req_ngpus > 0) {
            comments = "gpus=" req_ngpus " " comments
        }

        if (used == 1) {
            comments = exec_host " " comments
            cpu_load=used_cpu/ncpus
            printf "%14s %-15s  %1s %3d   %3d %3d    %5.1f %5.1f  %5s %5s  %s\n", job_id, job_name, job_state, node_cnt, ncpus, cpu_load, req_mem, used_mem, req_walltime, used_walltime, comments
        } else {
            if (arrayjob == 1) {
                if (length(array_used) > 0) {
                    comments = array_used " " comments
                } else {
                    comments = array_req " " comments
                }
            }
            printf "%14s %-15s  %1s %3d   %3d ---    %5.1f -----  %5s -----  %s\n", job_id, job_name, job_state, node_cnt, ncpus, req_mem, req_walltime, comments
        }
    }
    '
done

        printf "=========================================================================================\n"


